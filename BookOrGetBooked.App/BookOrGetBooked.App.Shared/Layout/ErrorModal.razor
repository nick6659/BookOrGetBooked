@code {
    [Parameter] public string Title { get; set; } = "Error";
    [Parameter] public string Message { get; set; } = "An unexpected error occurred.";
    private bool isVisible = false;

    public Task ShowAsync(string message, string title = "Error")
    {
        Message = message;
        Title = title;
        isVisible = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void Close()
    {
        isVisible = false;
    }
}

@if (isVisible)
{
    <div class="modal-backdrop">
        <div class="modal">
            <div class="modal-header">
                <h3>@Title</h3>
                <button class="close-button" @onclick="Close">×</button>
            </div>
            <div class="modal-body">
                <p>@Message</p>
            </div>
            <div class="modal-footer">
                <button class="login-button" @onclick="Close">OK</button>
            </div>
        </div>
    </div>
}

<style>
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.4);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal {
        background-color: white;
        padding: 2rem;
        border-radius: 8px;
        width: 90%;
        max-width: 400px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.2);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .close-button {
        font-size: 1.5rem;
        background: none;
        border: none;
        cursor: pointer;
    }

    .modal-footer {
        text-align: right;
    }
</style>
