@layout PublicLayout
@page "/login"
@using BookOrGetBooked.App.Shared.Interfaces
@using BookOrGetBooked.App.Shared.Layout
@using BookOrGetBooked.Shared.DTOs.Auth
@inject NavigationManager Navigation
@inject IAuthService AuthService
@attribute [Microsoft.AspNetCore.Authorization.AllowAnonymous]

<div class="login-container">
    <h1 class="login-title">🔑 Login</h1>

    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputText @bind-Value="loginModel.Email" placeholder="Email" class="login-input" />
        <InputText @bind-Value="loginModel.Password" placeholder="Password" type="password" class="login-input" />

        <button type="submit" class="login-button" disabled="@isLoading">
            @if (isLoading)
            {
                <span class="loader"></span>
            }
            else
            {
                <span>LOGIN</span>
            }
        </button>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="login-error">@errorMessage</p>
    }

    <p class="login-link" @onclick="GoToRegister">Don’t have an account? Register</p>
    <p class="login-link" @onclick="GoToForgotPassword">Forgot your password?</p>
</div>

@code {
    private LoginRequestDto loginModel = new() { Email = "", Password = "" };
    private string? errorMessage;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = null;

        var result = await AuthService.LoginAsync(loginModel);
        isLoading = false;

        if (result.IsSuccess)
        {
            Navigation.NavigateTo("/home");
        }
        else
        {
            errorMessage = result.ErrorMessage ?? "Login failed. Please check your credentials.";
        }
    }

    void GoToRegister() => Navigation.NavigateTo("/register");
    void GoToForgotPassword() => Navigation.NavigateTo("/forgot-password");
}
