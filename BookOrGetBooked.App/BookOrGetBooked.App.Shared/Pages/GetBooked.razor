@page "/get-booked"
@attribute [Authorize]

@using BookOrGetBooked.App.Shared.Components
@using BookOrGetBooked.App.Shared.Interfaces
@using BookOrGetBooked.Shared.DTOs.Service
@using Microsoft.AspNetCore.Authorization
@inject IJSRuntime JS
@inject IAuthService AuthService
@inject IServiceService ServiceService
@inject NavigationManager Navigation

<div class="provider-services-page">
    <div class="page-header @(isHeaderHidden ? "hide" : "")" @ref="stickyHeaderRef">
        <h1 class="page-title">📈 My Services</h1>
        <input class="search-box" type="text" value="@searchQuery" @oninput="OnSearchInput" placeholder="Search your services..." />
        <button class="add-service-button" @onclick="OpenAddServiceModal">➕ Add New Service</button>
    </div>

    <div class="scroll-wrapper" @ref="scrollWrapperRef" @onwheel="HandleScroll">
        <div class="services-list">
            @if (isLoading)
            {
                <p>Loading your services...</p>
            }
            else if (filteredServices.Count == 0)
            {
                <p class="no-results">No services found.</p>
            }
            else
            {
                @foreach (var service in filteredServices)
                {
                    <ServiceCard Service="service" OnClick="() => OpenBookingListModal(service)" />
                }
            }
        </div>
    </div>

    <CreateServiceModal Visible="isAddModalOpen" OnClose="CloseAddServiceModal" />
    <ServiceBookingsModal Service="selectedService" Visible="isBookingListOpen" OnClose="CloseBookingListModal" />
</div>

@code {
    private List<ServiceResponseDTO> services = new();
    private List<ServiceResponseDTO> filteredServices = new();
    private string searchQuery = "";
    private bool isLoading = true;
    private bool isAddModalOpen = false;
    private bool isBookingListOpen = false;
    private ElementReference scrollWrapperRef;
    private ElementReference stickyHeaderRef;
    private bool isHeaderHidden = false;
    private double lastScrollTop = 0;
    private ServiceResponseDTO? selectedService;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = await AuthService.GetCurrentUserAsync();
            if (user is null) return;

            services = await ServiceService.GetServicesByProviderAsync(user.Id);
            filteredServices = services;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading services: " + ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterServices()
    {
        filteredServices = string.IsNullOrWhiteSpace(searchQuery)
            ? services
            : services.Where(s => s.ServiceType.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        FilterServices();
    }

    private async Task HandleScroll(WheelEventArgs e)
    {
        var currentScrollTop = await JS.InvokeAsync<double>("getScrollTop", scrollWrapperRef);

        if (currentScrollTop < 10)
        {
            isHeaderHidden = false;
        }
        else if (currentScrollTop > lastScrollTop + 10)
        {
            isHeaderHidden = true;
        }
        else if (currentScrollTop < lastScrollTop - 10)
        {
            isHeaderHidden = false;
        }

        lastScrollTop = currentScrollTop;
    }

    private void OpenAddServiceModal() => isAddModalOpen = true;
    private Task CloseAddServiceModal() { isAddModalOpen = false; return Task.CompletedTask; }

    private void OpenBookingListModal(ServiceResponseDTO service)
    {
        selectedService = service;
        isBookingListOpen = true;
    }

    private Task CloseBookingListModal()
    {
        selectedService = null;
        isBookingListOpen = false;
        return Task.CompletedTask;
    }
}
